{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","Faculty.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","CardList","faculty","map","user","i","components_Card","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this$state","filteredFaculty","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b700619.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Card Component\r\nconst Card = ({ name, email }) => {\r\n    return (        \r\n        // Style using tachyons\r\n        <div className='tc bg-dark-red dib br3 pa3 ma2 grow bw2 shwdow-5 white'>\r\n            <div>\r\n                {/* Faculty Name */}\r\n                <h2>{name}</h2>\r\n                {/* Faulty Email */}\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ faculty }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                //Display Card List\r\n                faculty.map((user, i) => {\r\n                    return <Card\r\n                        key={i}\r\n                        id={faculty[i].id}\r\n                        name={faculty[i].name}\r\n                        email={faculty[i].email}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className = 'pa2 ba b--red'\r\n                type='search' placeholder='search faculty'\r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const faculty = [\r\n    {\r\n      id: 1,\r\n      name: 'Ian Tipson',\r\n      email: 'Ian.Tipson@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Betrice Brangman',\r\n      email: 'Betrice.Brangman@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Karishma Jacob',\r\n      email: 'Karishma.Jacob@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Nick Romanidis',\r\n      email: 'nick.romanidis@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Tim McKenna',\r\n      email: 'timothy.mckenna@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'John Selmys',\r\n      email: 'John.Selmys@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kadeem Best',\r\n      email: 'kadeem.best@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Lydia Li',\r\n      email: 'lydia.li@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Mary Saith',\r\n      email: 'mary.saith@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'James Mwangi',\r\n      email: 'james.mwangi@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 11,\r\n      name: 'Cameron Gray',\r\n      email: 'cameron.gray@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 12,\r\n      name: 'Najma Ismat',\r\n      email: 'Najma.Ismat@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 13,\r\n      name: 'Nasim Razavi',\r\n      email: 'nasim.razavi@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 14,\r\n      name: 'Chris Szalwinski',\r\n      email: 'chris.szalwinski@senecacollege.ca'\r\n    },\r\n    {\r\n      id: 15,\r\n      name: 'Md Nour Hossain',\r\n      email: 'md-nour.hossain@senecacollege.ca'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '600px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport { faculty } from '../Faculty';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            faculty: faculty,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render () {\r\n        /*To communicate with CardList, it filters the name of faculty*/\r\n        const { faculty, searchfield } = this.state;\r\n        const filteredFaculty = faculty.filter(faculty => {\r\n            return faculty.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        return (\r\n            <div className = 'tc'>\r\n                <h1> ICT Seneca Faculty Finder </h1>\r\n                {/* Search Box Component */}\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    {/* Card List Component */}\r\n                    <CardList faculty={filteredFaculty}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'; // view library, core\nimport ReactDOM from 'react-dom'; // \nimport './index.css';\n//import Card from './Card';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { faculty } from './Faculty'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}